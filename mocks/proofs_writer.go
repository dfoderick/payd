// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/libsv/go-bc"
	"github.com/libsv/payd"
	"sync"
)

// Ensure, that ProofsWriterMock does implement gopayd.ProofsWriter.
// If this is not the case, regenerate this file with moq.
var _ gopayd.ProofsWriter = &ProofsWriterMock{}

// ProofsWriterMock is a mock implementation of gopayd.ProofsWriter.
//
// 	func TestSomethingThatUsesProofsWriter(t *testing.T) {
//
// 		// make and configure a mocked gopayd.ProofsWriter
// 		mockedProofsWriter := &ProofsWriterMock{
// 			CreateFunc: func(ctx context.Context, req bc.MerkleProof) error {
// 				panic("mock out the Create method")
// 			},
// 		}
//
// 		// use mockedProofsWriter in code that requires gopayd.ProofsWriter
// 		// and then make assertions.
//
// 	}
type ProofsWriterMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, req bc.MerkleProof) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req bc.MerkleProof
		}
	}
	lockCreate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ProofsWriterMock) Create(ctx context.Context, req bc.MerkleProof) error {
	if mock.CreateFunc == nil {
		panic("ProofsWriterMock.CreateFunc: method is nil but ProofsWriter.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req bc.MerkleProof
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedProofsWriter.CreateCalls())
func (mock *ProofsWriterMock) CreateCalls() []struct {
	Ctx context.Context
	Req bc.MerkleProof
} {
	var calls []struct {
		Ctx context.Context
		Req bc.MerkleProof
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}
